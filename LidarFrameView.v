module LidarFrameView
(
clk,        		   //Ä£ï¿½ï¿½Ê±ï¿½ï¿½ 50MHz
rst_n,               //Ä£ï¿½é¸´Î»
rs232_tx,	         //232 TXï¿½ï¿½ï¿½ï¿½
startPoint,
AD_data,
AD_clk,
AD_OE,
CCD_clk,
CCD_rst,
CCD_sht,
CCD_data,
CCD_M0,
CCD_M1,
CCD_RM,
DAC_CLK,
DAC_SYNC,
DAC_DIN
);

input  clk;       		   //Ä£ï¿½ï¿½Ê±ï¿½ï¿½ 50MHz
input  rst_n;            //Ä£ï¿½é¸´Î»
input [7:0] AD_data;
input startPoint;
output rs232_tx;	      //232 TXï¿½ï¿½ï¿½ï¿½
output AD_clk;
output AD_OE;
output CCD_clk;
output CCD_rst;
output CCD_sht;
output CCD_data;
output CCD_M0;
output CCD_M1;
output CCD_RM;

wire  serialsend_flag;     //ï¿½ï¿½Ð­ï¿½é·¢ï¿½ï¿½ï¿½ï¿½ï¿½Ý±ï¿½ï¿½ï¿½Îª  
//Bufferï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ 
wire  [7:0]data;        			//Òªï¿½ï¿½ï¿½ï¿½Bufferï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
wire  wrclk;      			//Ð´ï¿½ï¿½Ê±ï¿½ï¿½
wire  wrreq;      			//Ð´ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
wire  wrempty;    			//Ð´ï¿½ï¿½bufferï¿½Õ±ï¿½Ö¾
wire  wrfull;     			//Ð´ï¿½ï¿½bufferï¿½ï¿½ï¿½ï¿½Ö¾
wire  [9:0] wrusedw;     			//Ð´ï¿½ï¿½ï¿½ï¿½ï¿½wire  rdempty;	            //ï¿½ï¿½Õ±ï¿½ï¿½ï¿½wire  rdfull;              //ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
wire  frameclk;             //ï¿½ï¿½ï¿½ï¿½Ö¡ï¿½ï¿½ï¿½ï¿½,ï¿½ï¿½ï¿½ï¿½ï¿½ÅºÅ±ï¿½ï¿½ï¿½ï¿½ï¿½Ð´ï¿½ï¿½ï¿½ï¿½Ö®Ç°ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ð§


wire sample_clk;
wire [8:0] frame_number;
wire enable;
wire  [25:0] timeSet; //ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ 26Î» ï¿½ï¿½ï¿½ï¿½67 108 863
wire  [8:0] resolution;//ï¿½Ö±ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ ,ï¿½ï¿½ï¿½ï¿½360   1

assign enable=1;
assign timeSet = 22000;
assign resolution = 10;
assign serialsend_flag = 1;



output DAC_CLK;
output DAC_SYNC;
output DAC_DIN;


reg st;
reg [7:0] countcount;
reg flag;
always @(posedge clk or negedge rst_n )
begin
	if(!rst_n)
	begin
		st <= 0;
		countcount <= 0;
		flag <= 0;
	end
	else
	begin
	case(flag)
	1'b0:
	begin
		countcount <= countcount +1;
		if(countcount >= 8'd250)
		begin
			st <= 1;
			flag <= 1;
		end
	end
	1'b1:
	begin
		
	end
	endcase
	end
end



SamplingControl SamplingControl_inst
(
.clk(clk),
.n_rst(rst_n),
.timeSet(timeSet),
.resolution(resolution),
.startPoint(startPoint),
.enable(enable),
.sample_clk(sample_clk),
.frame_number(frame_number)
);

CCD_ADC_Control  CCD_ADC_Control_inst 
(
.clk(clk),
.n_rst(rst_n),
.AD_data(AD_data),

.AD_clk(AD_clk),
.AD_OE(AD_OE),
.CCD_clk(CCD_clk),
.CCD_rst(CCD_rst),
.CCD_sht(CCD_sht),
.CCD_data(CCD_data),
.CCD_M0(CCD_M0),
.CCD_M1(CCD_M1),
.CCD_RM(CCD_RM),

.serialsend_flag(),     //ï¿½ï¿½Ð­ï¿½é·¢ï¿½ï¿½ï¿½ï¿½ï¿½Ý±ï¿½ï¿½ï¿½Îª  
//Bufferï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ 
.data(data),        			//Òªï¿½ï¿½ï¿½ï¿½Bufferï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
.wrclk(wrclk),      			//Ð´ï¿½ï¿½Ê±ï¿½ï¿½
.wrreq(wrreq),      			//Ð´ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
.wrempty(),    			//Ð´ï¿½ï¿½bufferï¿½Õ±ï¿½Ö¾
.wrfull(),     			//Ð´ï¿½ï¿½bufferï¿½ï¿½ï¿½ï¿½Ö¾
.wrusedw(),     			//Ð´ï¿½ï¿½ï¿½ï¿½ï¿rdempty(),	            //ï¿½ï¿½Õ±ï¿½ï¿½ï¿rdfull(),              //ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
.frameclk(frameclk)             //ï¿½ï¿½ï¿½ï¿½Ö¡ï¿½ï¿½ï¿½ï¿½,ï¿½ï¿½ï¿½ï¿½ï¿½ÅºÅ±ï¿½ï¿½ï¿½ï¿½ï¿½Ð´ï¿½ï¿½ï¿½ï¿½Ö®Ç°ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ð§

);

//----------   ï¿½ï¿½ï¿½ï¿½SerialSend --------//
SerialSend SerialSend_inst(
.clk(clk),        		   //Ä£ï¿½ï¿½Ê±ï¿½ï¿½ 50MHz
.rst_n(rst_n),//Ä£ï¿½é¸´Î»
.rs232_tx(rs232_tx),	      //232 TXï¿½ï¿½ï¿½ï¿½
.serialsend_flag(serialsend_flag),     //ï¿½ï¿½Ð­ï¿½é·¢ï¿½ï¿½ï¿½ï¿½ï¿½Ý±ï¿½ï¿½ï¿½
//Bufferï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ 
.data(data),      //Òªï¿½ï¿½ï¿½ï¿½Bufferï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
.wrclk(wrclk),      	//Ð´ï¿½ï¿½Ê±ï¿½ï¿½
.wrreq(wrreq),      		//Ð´ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
.wrempty(wrempty),    			   //Ð´ï¿½ï¿½bufferï¿½Õ±ï¿½Ö¾
.wrfull(wrfull),     			   //Ð´ï¿½ï¿½bufferï¿½ï¿½ï¿½ï¿½Ö¾
.wrusedw(wrusedw),     			   //Ð´ï¿½ï¿½ï¿½ï¿½ï¿rdempty(rdempty),	               //ï¿½ï¿½Õ±ï¿½ï¿½ï¿rdfull(rdfull),                 //ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
.frameclk(frameclk )        //ï¿½ï¿½ï¿½ï¿½Ö¡ï¿½ï¿½ï¿½ï¿½,ï¿½ï¿½ï¿½ï¿½ï¿½ÅºÅ±ï¿½ï¿½ï¿½ï¿½ï¿½Ð´ï¿½ï¿½ï¿½ï¿½Ö®Ç°ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ð§

);

dac7512 dac7512_inst(
.clk(clk),
.rst_n(rst_n),
.sclk(DAC_CLK),
.sync(DAC_SYNC),
.din(DAC_DIN)
);

endmodule


